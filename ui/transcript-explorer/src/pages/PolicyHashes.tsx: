import React, { useEffect, useState } from "react";

type StageItem = {
  stageId: string; domain: string; version: string; policyHash: string;
  imageDigest: string; ncuCap: number; cooldownHours: number; freshSleepRequired: boolean;
  changelog?: string;
};
type Manifest = { version: string; generatedAt: string; stages: StageItem[]; signer?: {org:string;contact:string} };

export default function PolicyHashes() {
  const [data, setData] = useState<Manifest | null>(null);
  const [err, setErr] = useState<string | null>(null);

  useEffect(() => {
    fetch("/policy-hashes.json")
      .then(r => r.ok ? r.json() : Promise.reject(r.statusText))
      .then(setData)
      .catch(e => setErr(String(e)));
  }, []);

  return (
    <div className="max-w-6xl mx-auto px-6 py-10">
      <h1 className="text-3xl font-extrabold tracking-tight">Stage Policy Hashes</h1>
      <p className="text-zinc-600 mt-2">Public registry of pilot Stage scripts (IDs, versions, hashes).</p>
      {err && <div className="mt-4 text-sm text-red-600">Error: {err}</div>}
      {!data ? (
        <div className="mt-6 text-sm text-zinc-500">Loading…</div>
      ) : (
        <>
          <div className="mt-4 text-xs text-zinc-500">
            Manifest v{data.version} • Generated {new Date(data.generatedAt).toLocaleString()}
            {data.signer && <> • Issuer: {data.signer.org} ({data.signer.contact})</>}
          </div>
          <div className="mt-6 overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="text-left border-b border-zinc-200">
                  <th className="py-2 pr-4">Stage ID</th>
                  <th className="py-2 pr-4">Domain</th>
                  <th className="py-2 pr-4">Version</th>
                  <th className="py-2 pr-4">Policy hash</th>
                  <th className="py-2 pr-4">Image</th>
                  <th className="py-2 pr-4">NCU</th>
                  <th className="py-2 pr-4">Cooldown</th>
                  <th className="py-2 pr-4">Fresh sleep</th>
                </tr>
              </thead>
              <tbody>
                {data.stages.map(s => (
                  <tr key={s.stageId} className="border-b border-zinc-100">
                    <td className="py-2 pr-4 font-mono">{s.stageId}</td>
                    <td className="py-2 pr-4">{s.domain}</td>
                    <td className="py-2 pr-4">{s.version}</td>
                    <td className="py-2 pr-4 font-mono text-xs">{s.policyHash}</td>
                    <td className="py-2 pr-4 font-mono text-xs">{s.imageDigest.replace('sha256:','sha256:…').slice(0,14)}</td>
                    <td className="py-2 pr-4">{s.ncuCap}</td>
                    <td className="py-2 pr-4">{s.cooldownHours}h</td>
                    <td className="py-2 pr-4">{s.freshSleepRequired ? "Yes" : "No"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="mt-4 text-xs text-zinc-500">
            Notes: hashes are deterministic commitments to Stage scripts and policies. Pilot receipts are beta and advisory.
          </div>
        </>
      )}
    </div>
  );
}
